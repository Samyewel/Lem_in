Intra Projects Lem_in Edit
No author file
5â€“7 minutes
Prerequisites

If something here is missing, the defence is finished and final grade is 0.

    Nothing in the git repository.
    Check that the author file is at the root of the repository and formatted as explained in the subject.
    The norm is not respected, the norminette is proof.
    Cheat (The student can not explains her/his code) => Flag Cheat
    A prohibited function is used.
    The program is called lem-in
    The program must be able to read an ant-farm on the standard output. (For example: "./lem-in < ant_farm.txt")

Missing information

    Evaluate the implementation of error management when there is no room.
    Evaluate the implementation of error management when there is no ant.
    Evaluate the implementation of error management when there is no ##start / ##end.

Comments and commands

    The program accepts ant-farms with comments.
    The program accepts ant-farms with commands other than ##start ##end.

No possible solution

Evaluate the implementation of error management when there is no possible
solution with the given ant-farm.
Ant-farm composition.

The ant-farm's composition is displayed on the standard output,
as well as commands and comments.
Ants movements

The movements are printed with the right format:

    1 line per turn
    N movements per turn
    A movement is defined as follow "Lx-y" where x is the ant's number and y a room's name

Algorithm explaination

Here the student will have to explain her/his approach and justify her/his choices
in research and implementation of her/his algorithm.

    Why is it adapted to the problem?
    How does it work? Has the corrector understood how the algorithm works? This step is necessary for the validation of the project.
    Take all the time you need to understand.
    Ask your questions that are useful for understanding.

Path validity

Throughout this section the program must go off the valid paths.
It is up to you to check the validity of the outputs.
If only one of these outputs is not valid, check No and the defense stops here.

Valid means:

    At each line, only one movement per ants
    That before a move the room targeted by the ants is free (there is no ant inside)
    That ants move in rooms within range (connected by a tube to the current room)
    That at the end of the program all ants are in ##end

If none of your tests obtain an invalid solution, check Yes.

Does the program always provide a right solution?
Flow management

Does the program use several paths when they do not overlay each other and
that this is necessary?
You must use the generator given as an example with the --flow-one option, then
--flow-ten, then --flow-thousand.
The generator, indicates the number of lines expected, any difference with
this expectation shows a poorly optimized algorithm.
These cases are easy to implement and do not require any elaborate algorithms.
Therefore, we will only tolerate a difference of a maximum of 3 lines here.
Otherwise it means that the paths are misused, or that not all of them are found by the algorithm.
The student has then misunderstood the subject, check No and the correction stops here.
Time complexity

Test the program with maps generated by the generator with the --big option,
then test it with the --big-superposition option.
Measure the execution time of the program, and note on several tests.

    5 --> Well done, perfect, the program always runs around 3 seconds or less.
    4 --> very well, the program runs in 6 seconds maximum.
    3 --> the program runs in 9 seconds maximum.
    2 --> lack of optimization, the program runs in 12 seconds maximum.
    1 --> very slow, however, the program runs in 15 seconds maximum.
    0 --> ...the program sometimes runs in more than 15 seconds, the subject is not respected, the defense stops here.

Rate it from 0 (failed) through 5 (excellent)
Algorithm's accuracy

Measure the accuracy of the program's results:
The maps generated by the generator with the --big-superposition option are used here
to check the proper management of the path overlay problem.
The generator indicates the number of lines expected as comments.
This is a complex and important problem in graph theory,
processing it correctly is required.

Attention! The maps generated by the generator are by no means exhaustive
for these tests, you are invited to test the algorithm with maps of your creation.
Use your imagination to test the consistency and the accuracy of the algorithm.

    5 --> everything is absolutely perfect, well done, the algorithm always gives a number of lines equal or lower than that of the generator.
    4 --> optimized algorithm but the result is sometimes one to two lines higher than the generator.
    3 --> good algorithm but the result is sometimes 3 to 10 lines higher than the generator.
    2 --> On some maps, the number of difference lines increases dramatically.
    1 --> the algorithm is designed to manage the superposition of paths but the results are very far from the objectives.
    0 --> the algorithm does not handle path overlay, the subject is not respected, the defense stops here.

Rate it from 0 (failed) through 5 (excellent)
Bonuses

In this section you can evaluate up to 5 operational and well
implemented bonuses.

Bonus example:

    Graphic visualizer -> if you find it very well made, you can give more than 1 point for it.
    ...

Rate it from 0 (failed) through 5 (excellent